You have an empty sequence, and you will be given  queries. Each query is one of these three types:

1 x  -Push the element x into the stack.
2    -Delete the element present at the top of the stack.
3    -Print the maximum element in the stack.
Function Description

Complete the getMax function in the editor below.

getMax has the following parameters:
- string operations[n]: operations as strings

Returns
- int[]: the answers to each type 3 query

Input Format

The first line of input contains an integer, . The next  lines each contain an above mentioned query.

Constraints

Constraints



All queries are valid.

Sample Input

STDIN   Function
-----   --------
10      operations[] size n = 10
1 97    operations = ['1 97', '2', '1 20', ....]
2
1 20
2
1 26
1 20
2
3
1 91
3
Sample Output

26
91

import java.util.Scanner;
import java.util.Stack;
 
public class StackProblem{
 
    public static void main(String arg[]) {
 
        // two stacks are required
        Stack<Integer> elementsStack = new Stack<>();
        Stack<Integer> maxElementStack = new Stack<>();
 
        Scanner snr = new Scanner(System.in);
       
        // no of quires
        // n--> number of querys
        int n = snr.nextInt();
        for(int i=0;i<n;i++) {
           
            // type of query is define
            int input = snr.nextInt();
            switch (input){
                case 1:
                // if type of query is push 
                // push it into both stacks
                // before push into max stack check where it is max or not.
                 // x--> value of element
                    int x = snr.nextInt();
                    elementsStack.push(x);
                    if(maxElementStack.isEmpty() || x >= maxElementStack.peek()) {
                        maxElementStack.push(x);
                    }
                    break;
 
                case 2:
                 // pop from stack
                 // pop from both  stack
                 // before pop from the max stack wether the element is at top 
                 // or not
                    int popVl = elementsStack.pop();
                    if(popVl == maxElementStack.peek()) {
                       maxElementStack.pop();
                    }
                    break;
 
                case 3:
                
                   // print the element at top of max stack.
                    System.out.println(maxElementStack.peek());
                    break;
 
                default: break;
            }
        }
        snr.close();
    }
}
